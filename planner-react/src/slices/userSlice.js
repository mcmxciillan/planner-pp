/**
* @fileoverview This file exports a Redux slice called userSlice that contains the initial state of the user and its reducers to update it.
* It also exports several selectors to retrieve specific pieces of data from the state.
* This file uses createSlice function from @reduxjs/toolkit package to generate the slice.
* The sessionSlice object contains four reducers, named logUserIn, logUserOut, setJWT, and clearJWT, which modify the user session state in response to dispatched actions.
* The selectUserLoggedIn, selectJWT, and selectUser functions are selectors that return specific pieces of data from the session state.
* The logUserIn reducer sets the session state to indicate that a user is logged in and stores the user data in local storage.
* The logUserOut reducer clears the user data from the session state and local storage.
* The setJWT reducer sets the JWT in the session state and stores it in local storage.
* The clearJWT reducer clears the JWT from the session state and local storage.
*/
import { createSlice } from '@reduxjs/toolkit'

/**
* A Redux slice that contains the initial session state and reducers to modify it.
*/
export const userSlice = createSlice({
    name: 'user',
    initialState: {
        user: JSON.parse(localStorage.getItem("planner-pp-user")) || null,
    },
    reducers: {
        setUser: (state, action) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            const userData = {
                email: action.payload.email,
                events: action.payload.events,
                firstName: action.payload.firstName,
                lastName: action.payload.lastName,
                roles: action.payload.roles,
                _id: action.payload._id.$oid
            }
            state.user = userData
            localStorage.setItem("planner-pp-user", JSON.stringify(userData))
        },
        addVendorRoleToUser: (state) => {
            const userData = state.user.user;
            userData.roles.push('Vendor')
            localStorage.setItem("planner-pp-user", JSON.stringify(userData))
        },
        clearUser: (state) => {
            state.user = null
            localStorage.removeItem("planner-pp-user")
        }
    }
})

// Actions generated by the reducers
export const { setUser, clearUser, addVendorRoleToUser } = userSlice.actions

// The functions below are called selectors and allows us to select values from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state) => state.counter.value)`
/**
Selectors to retrieve specific data from the session state.
These selectors can be used with the useSelector hook to retrieve the desired data.
*/
export const selectUser = (state) => state.user.user

// The reducer function generated by the slice
export default userSlice.reducer