import { createSlice } from '@reduxjs/toolkit'

/**
* A Redux slice that contains the initial session state and reducers to modify it.
*/
export const userSlice = createSlice({
    name: 'user',
    initialState: {
        user: JSON.parse(localStorage.getItem("planner-pp-user")) || null
    },
    reducers: {
        setUser: (state, action) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            const data = action.payload

            const userData = {
                _id: data._id.$oid,
                firstName: data.firstName,
                lastName: data.lastName,
                email: data.email,
                roles: data.roles
            }
            state.user = userData
            localStorage.setItem("planner-pp-user", JSON.stringify(userData));
        },
        addVendorRoleToUser: (state) => {
            console.log("Adding vendor role to user: ", state.user)
            const userData = state.user;
            userData.roles.push('Vendor')
        },
        clearUser: (state) => {
            state.user = null
            localStorage.removeItem("planner-pp-user");
        }
    }
})

// Actions generated by the reducers
export const { setUser, clearUser, addVendorRoleToUser, isVendor } = userSlice.actions

// The functions below are called selectors and allows us to select values from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state) => state.counter.value)`
/**
Selectors to retrieve specific data from the session state.
These selectors can be used with the useSelector hook to retrieve the desired data.
*/
export const selectUser = (state) => state.user.user

// The reducer function generated by the slice
export default userSlice.reducer